// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto;
namespace kv {
class KvCommand;
struct KvCommandDefaultTypeInternal;
extern KvCommandDefaultTypeInternal _KvCommand_default_instance_;
class KvCommandReply;
struct KvCommandReplyDefaultTypeInternal;
extern KvCommandReplyDefaultTypeInternal _KvCommandReply_default_instance_;
}  // namespace kv
PROTOBUF_NAMESPACE_OPEN
template<> ::kv::KvCommand* Arena::CreateMaybeMessage<::kv::KvCommand>(Arena*);
template<> ::kv::KvCommandReply* Arena::CreateMaybeMessage<::kv::KvCommandReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kv {

enum Ops : int {
  GET = 0,
  PUT = 1,
  INSERT = 2,
  Ops_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Ops_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Ops_IsValid(int value);
constexpr Ops Ops_MIN = GET;
constexpr Ops Ops_MAX = INSERT;
constexpr int Ops_ARRAYSIZE = Ops_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ops_descriptor();
template<typename T>
inline const std::string& Ops_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ops>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ops_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ops_descriptor(), enum_t_value);
}
inline bool Ops_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ops* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ops>(
    Ops_descriptor(), name, value);
}
enum Error : int {
  ERROR_OK = 0,
  ERROR_NO_KEY = 1,
  Error_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Error_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Error_IsValid(int value);
constexpr Error Error_MIN = ERROR_OK;
constexpr Error Error_MAX = ERROR_NO_KEY;
constexpr int Error_ARRAYSIZE = Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor();
template<typename T>
inline const std::string& Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_descriptor(), enum_t_value);
}
inline bool Error_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error>(
    Error_descriptor(), name, value);
}
// ===================================================================

class KvCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.KvCommand) */ {
 public:
  inline KvCommand() : KvCommand(nullptr) {}
  ~KvCommand() override;
  explicit constexpr KvCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvCommand(const KvCommand& from);
  KvCommand(KvCommand&& from) noexcept
    : KvCommand() {
    *this = ::std::move(from);
  }

  inline KvCommand& operator=(const KvCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvCommand& operator=(KvCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvCommand* internal_default_instance() {
    return reinterpret_cast<const KvCommand*>(
               &_KvCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KvCommand& a, KvCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(KvCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KvCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.KvCommand";
  }
  protected:
  explicit KvCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kOperationFieldNumber = 1,
    kSeqFieldNumber = 5,
    kCidFieldNumber = 4,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .kv.Ops operation = 1;
  void clear_operation();
  ::kv::Ops operation() const;
  void set_operation(::kv::Ops value);
  private:
  ::kv::Ops _internal_operation() const;
  void _internal_set_operation(::kv::Ops value);
  public:

  // uint32 seq = 5;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // int64 cid = 4;
  void clear_cid();
  int64_t cid() const;
  void set_cid(int64_t value);
  private:
  int64_t _internal_cid() const;
  void _internal_set_cid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:kv.KvCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int operation_;
  uint32_t seq_;
  int64_t cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class KvCommandReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.KvCommandReply) */ {
 public:
  inline KvCommandReply() : KvCommandReply(nullptr) {}
  ~KvCommandReply() override;
  explicit constexpr KvCommandReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvCommandReply(const KvCommandReply& from);
  KvCommandReply(KvCommandReply&& from) noexcept
    : KvCommandReply() {
    *this = ::std::move(from);
  }

  inline KvCommandReply& operator=(const KvCommandReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvCommandReply& operator=(KvCommandReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvCommandReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvCommandReply* internal_default_instance() {
    return reinterpret_cast<const KvCommandReply*>(
               &_KvCommandReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KvCommandReply& a, KvCommandReply& b) {
    a.Swap(&b);
  }
  inline void Swap(KvCommandReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvCommandReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvCommandReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvCommandReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvCommandReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KvCommandReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvCommandReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.KvCommandReply";
  }
  protected:
  explicit KvCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kValueFieldNumber = 3,
    kLeaderFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool leader = 1;
  void clear_leader();
  bool leader() const;
  void set_leader(bool value);
  private:
  bool _internal_leader() const;
  void _internal_set_leader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kv.KvCommandReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool leader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2eproto;
};
// ===================================================================

class CommandRPC_Stub;

class CommandRPC : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CommandRPC() {};
 public:
  virtual ~CommandRPC();

  typedef CommandRPC_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Command(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::KvCommand* request,
                       ::kv::KvCommandReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CommandRPC);
};

class CommandRPC_Stub : public CommandRPC {
 public:
  CommandRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CommandRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CommandRPC_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CommandRPC ------------------------------------------

  void Command(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::kv::KvCommand* request,
                       ::kv::KvCommandReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CommandRPC_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KvCommand

// .kv.Ops operation = 1;
inline void KvCommand::clear_operation() {
  operation_ = 0;
}
inline ::kv::Ops KvCommand::_internal_operation() const {
  return static_cast< ::kv::Ops >(operation_);
}
inline ::kv::Ops KvCommand::operation() const {
  // @@protoc_insertion_point(field_get:kv.KvCommand.operation)
  return _internal_operation();
}
inline void KvCommand::_internal_set_operation(::kv::Ops value) {
  
  operation_ = value;
}
inline void KvCommand::set_operation(::kv::Ops value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:kv.KvCommand.operation)
}

// string key = 2;
inline void KvCommand::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KvCommand::key() const {
  // @@protoc_insertion_point(field_get:kv.KvCommand.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvCommand::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.KvCommand.key)
}
inline std::string* KvCommand::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kv.KvCommand.key)
  return _s;
}
inline const std::string& KvCommand::_internal_key() const {
  return key_.Get();
}
inline void KvCommand::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvCommand::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvCommand::release_key() {
  // @@protoc_insertion_point(field_release:kv.KvCommand.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvCommand::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.KvCommand.key)
}

// string value = 3;
inline void KvCommand::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KvCommand::value() const {
  // @@protoc_insertion_point(field_get:kv.KvCommand.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvCommand::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.KvCommand.value)
}
inline std::string* KvCommand::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:kv.KvCommand.value)
  return _s;
}
inline const std::string& KvCommand::_internal_value() const {
  return value_.Get();
}
inline void KvCommand::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvCommand::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvCommand::release_value() {
  // @@protoc_insertion_point(field_release:kv.KvCommand.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvCommand::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.KvCommand.value)
}

// int64 cid = 4;
inline void KvCommand::clear_cid() {
  cid_ = int64_t{0};
}
inline int64_t KvCommand::_internal_cid() const {
  return cid_;
}
inline int64_t KvCommand::cid() const {
  // @@protoc_insertion_point(field_get:kv.KvCommand.cid)
  return _internal_cid();
}
inline void KvCommand::_internal_set_cid(int64_t value) {
  
  cid_ = value;
}
inline void KvCommand::set_cid(int64_t value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:kv.KvCommand.cid)
}

// uint32 seq = 5;
inline void KvCommand::clear_seq() {
  seq_ = 0u;
}
inline uint32_t KvCommand::_internal_seq() const {
  return seq_;
}
inline uint32_t KvCommand::seq() const {
  // @@protoc_insertion_point(field_get:kv.KvCommand.seq)
  return _internal_seq();
}
inline void KvCommand::_internal_set_seq(uint32_t value) {
  
  seq_ = value;
}
inline void KvCommand::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:kv.KvCommand.seq)
}

// -------------------------------------------------------------------

// KvCommandReply

// bool leader = 1;
inline void KvCommandReply::clear_leader() {
  leader_ = false;
}
inline bool KvCommandReply::_internal_leader() const {
  return leader_;
}
inline bool KvCommandReply::leader() const {
  // @@protoc_insertion_point(field_get:kv.KvCommandReply.leader)
  return _internal_leader();
}
inline void KvCommandReply::_internal_set_leader(bool value) {
  
  leader_ = value;
}
inline void KvCommandReply::set_leader(bool value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:kv.KvCommandReply.leader)
}

// string error = 2;
inline void KvCommandReply::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& KvCommandReply::error() const {
  // @@protoc_insertion_point(field_get:kv.KvCommandReply.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvCommandReply::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.KvCommandReply.error)
}
inline std::string* KvCommandReply::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:kv.KvCommandReply.error)
  return _s;
}
inline const std::string& KvCommandReply::_internal_error() const {
  return error_.Get();
}
inline void KvCommandReply::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvCommandReply::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvCommandReply::release_error() {
  // @@protoc_insertion_point(field_release:kv.KvCommandReply.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvCommandReply::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.KvCommandReply.error)
}

// string value = 3;
inline void KvCommandReply::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KvCommandReply::value() const {
  // @@protoc_insertion_point(field_get:kv.KvCommandReply.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvCommandReply::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.KvCommandReply.value)
}
inline std::string* KvCommandReply::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:kv.KvCommandReply.value)
  return _s;
}
inline const std::string& KvCommandReply::_internal_value() const {
  return value_.Get();
}
inline void KvCommandReply::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvCommandReply::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvCommandReply::release_value() {
  // @@protoc_insertion_point(field_release:kv.KvCommandReply.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvCommandReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.KvCommandReply.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kv::Ops> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kv::Ops>() {
  return ::kv::Ops_descriptor();
}
template <> struct is_proto_enum< ::kv::Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kv::Error>() {
  return ::kv::Error_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2eproto
