// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftRPC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raftRPC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raftRPC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raftRPC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raftRPC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftRPC_2eproto;
namespace raft {
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestAppendArgs;
struct RequestAppendArgsDefaultTypeInternal;
extern RequestAppendArgsDefaultTypeInternal _RequestAppendArgs_default_instance_;
class RequestAppendReply;
struct RequestAppendReplyDefaultTypeInternal;
extern RequestAppendReplyDefaultTypeInternal _RequestAppendReply_default_instance_;
class RequestVoteArgs;
struct RequestVoteArgsDefaultTypeInternal;
extern RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
class RequestVoteReply;
struct RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> ::raft::LogEntry* Arena::CreateMaybeMessage<::raft::LogEntry>(Arena*);
template<> ::raft::RequestAppendArgs* Arena::CreateMaybeMessage<::raft::RequestAppendArgs>(Arena*);
template<> ::raft::RequestAppendReply* Arena::CreateMaybeMessage<::raft::RequestAppendReply>(Arena*);
template<> ::raft::RequestVoteArgs* Arena::CreateMaybeMessage<::raft::RequestVoteArgs>(Arena*);
template<> ::raft::RequestVoteReply* Arena::CreateMaybeMessage<::raft::RequestVoteReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft {

// ===================================================================

class RequestVoteArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.RequestVoteArgs) */ {
 public:
  inline RequestVoteArgs() : RequestVoteArgs(nullptr) {}
  ~RequestVoteArgs() override;
  explicit constexpr RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteArgs(const RequestVoteArgs& from);
  RequestVoteArgs(RequestVoteArgs&& from) noexcept
    : RequestVoteArgs() {
    *this = ::std::move(from);
  }

  inline RequestVoteArgs& operator=(const RequestVoteArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteArgs& operator=(RequestVoteArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteArgs* internal_default_instance() {
    return reinterpret_cast<const RequestVoteArgs*>(
               &_RequestVoteArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteArgs& a, RequestVoteArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.RequestVoteArgs";
  }
  protected:
  explicit RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // uint32 term = 1;
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // int32 candidateId = 2;
  void clear_candidateid();
  int32_t candidateid() const;
  void set_candidateid(int32_t value);
  private:
  int32_t _internal_candidateid() const;
  void _internal_set_candidateid(int32_t value);
  public:

  // uint32 lastLogIndex = 3;
  void clear_lastlogindex();
  uint32_t lastlogindex() const;
  void set_lastlogindex(uint32_t value);
  private:
  uint32_t _internal_lastlogindex() const;
  void _internal_set_lastlogindex(uint32_t value);
  public:

  // uint32 lastLogTerm = 4;
  void clear_lastlogterm();
  uint32_t lastlogterm() const;
  void set_lastlogterm(uint32_t value);
  private:
  uint32_t _internal_lastlogterm() const;
  void _internal_set_lastlogterm(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.RequestVoteArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t term_;
  int32_t candidateid_;
  uint32_t lastlogindex_;
  uint32_t lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.RequestVoteReply) */ {
 public:
  inline RequestVoteReply() : RequestVoteReply(nullptr) {}
  ~RequestVoteReply() override;
  explicit constexpr RequestVoteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteReply(const RequestVoteReply& from);
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestVoteReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.RequestVoteReply";
  }
  protected:
  explicit RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // uint32 term = 1;
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // bool voteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.RequestVoteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t term_;
  bool votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class LogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() override;
  explicit constexpr LogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 3,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes command = 3;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint32 term = 1;
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  uint32_t term_;
  uint32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.RequestAppendArgs) */ {
 public:
  inline RequestAppendArgs() : RequestAppendArgs(nullptr) {}
  ~RequestAppendArgs() override;
  explicit constexpr RequestAppendArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAppendArgs(const RequestAppendArgs& from);
  RequestAppendArgs(RequestAppendArgs&& from) noexcept
    : RequestAppendArgs() {
    *this = ::std::move(from);
  }

  inline RequestAppendArgs& operator=(const RequestAppendArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAppendArgs& operator=(RequestAppendArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAppendArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAppendArgs* internal_default_instance() {
    return reinterpret_cast<const RequestAppendArgs*>(
               &_RequestAppendArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestAppendArgs& a, RequestAppendArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAppendArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAppendArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAppendArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAppendArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAppendArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestAppendArgs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.RequestAppendArgs";
  }
  protected:
  explicit RequestAppendArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 6,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 5,
  };
  // repeated .raft.LogEntry entries = 6;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::raft::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry >*
      mutable_entries();
  private:
  const ::raft::LogEntry& _internal_entries(int index) const;
  ::raft::LogEntry* _internal_add_entries();
  public:
  const ::raft::LogEntry& entries(int index) const;
  ::raft::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry >&
      entries() const;

  // uint32 term = 1;
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // int32 leaderId = 2;
  void clear_leaderid();
  int32_t leaderid() const;
  void set_leaderid(int32_t value);
  private:
  int32_t _internal_leaderid() const;
  void _internal_set_leaderid(int32_t value);
  public:

  // uint32 prevLogIndex = 3;
  void clear_prevlogindex();
  uint32_t prevlogindex() const;
  void set_prevlogindex(uint32_t value);
  private:
  uint32_t _internal_prevlogindex() const;
  void _internal_set_prevlogindex(uint32_t value);
  public:

  // uint32 prevLogTerm = 4;
  void clear_prevlogterm();
  uint32_t prevlogterm() const;
  void set_prevlogterm(uint32_t value);
  private:
  uint32_t _internal_prevlogterm() const;
  void _internal_set_prevlogterm(uint32_t value);
  public:

  // uint32 leaderCommit = 5;
  void clear_leadercommit();
  uint32_t leadercommit() const;
  void set_leadercommit(uint32_t value);
  private:
  uint32_t _internal_leadercommit() const;
  void _internal_set_leadercommit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.RequestAppendArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry > entries_;
  uint32_t term_;
  int32_t leaderid_;
  uint32_t prevlogindex_;
  uint32_t prevlogterm_;
  uint32_t leadercommit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRPC_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.RequestAppendReply) */ {
 public:
  inline RequestAppendReply() : RequestAppendReply(nullptr) {}
  ~RequestAppendReply() override;
  explicit constexpr RequestAppendReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAppendReply(const RequestAppendReply& from);
  RequestAppendReply(RequestAppendReply&& from) noexcept
    : RequestAppendReply() {
    *this = ::std::move(from);
  }

  inline RequestAppendReply& operator=(const RequestAppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAppendReply& operator=(RequestAppendReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAppendReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAppendReply* internal_default_instance() {
    return reinterpret_cast<const RequestAppendReply*>(
               &_RequestAppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestAppendReply& a, RequestAppendReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAppendReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAppendReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAppendReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAppendReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAppendReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestAppendReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.RequestAppendReply";
  }
  protected:
  explicit RequestAppendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kConflictIndexFieldNumber = 3,
    kConflictTermFieldNumber = 4,
  };
  // uint32 term = 1;
  void clear_term();
  uint32_t term() const;
  void set_term(uint32_t value);
  private:
  uint32_t _internal_term() const;
  void _internal_set_term(uint32_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 conflictIndex = 3;
  void clear_conflictindex();
  uint32_t conflictindex() const;
  void set_conflictindex(uint32_t value);
  private:
  uint32_t _internal_conflictindex() const;
  void _internal_set_conflictindex(uint32_t value);
  public:

  // uint32 conflictTerm = 4;
  void clear_conflictterm();
  uint32_t conflictterm() const;
  void set_conflictterm(uint32_t value);
  private:
  uint32_t _internal_conflictterm() const;
  void _internal_set_conflictterm(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:raft.RequestAppendReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t term_;
  bool success_;
  uint32_t conflictindex_;
  uint32_t conflictterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftRPC_2eproto;
};
// ===================================================================

class RaftRPC_Stub;

class RaftRPC : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftRPC() {};
 public:
  virtual ~RaftRPC();

  typedef RaftRPC_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raft::RequestVoteArgs* request,
                       ::raft::RequestVoteReply* response,
                       ::google::protobuf::Closure* done);
  virtual void RequestAppend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raft::RequestAppendArgs* request,
                       ::raft::RequestAppendReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftRPC);
};

class RaftRPC_Stub : public RaftRPC {
 public:
  RaftRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RaftRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RaftRPC_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RaftRPC ------------------------------------------

  void RequestVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raft::RequestVoteArgs* request,
                       ::raft::RequestVoteReply* response,
                       ::google::protobuf::Closure* done);
  void RequestAppend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raft::RequestAppendArgs* request,
                       ::raft::RequestAppendReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftRPC_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteArgs

// uint32 term = 1;
inline void RequestVoteArgs::clear_term() {
  term_ = 0u;
}
inline uint32_t RequestVoteArgs::_internal_term() const {
  return term_;
}
inline uint32_t RequestVoteArgs::term() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteArgs.term)
  return _internal_term();
}
inline void RequestVoteArgs::_internal_set_term(uint32_t value) {
  
  term_ = value;
}
inline void RequestVoteArgs::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteArgs.term)
}

// int32 candidateId = 2;
inline void RequestVoteArgs::clear_candidateid() {
  candidateid_ = 0;
}
inline int32_t RequestVoteArgs::_internal_candidateid() const {
  return candidateid_;
}
inline int32_t RequestVoteArgs::candidateid() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteArgs.candidateId)
  return _internal_candidateid();
}
inline void RequestVoteArgs::_internal_set_candidateid(int32_t value) {
  
  candidateid_ = value;
}
inline void RequestVoteArgs::set_candidateid(int32_t value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteArgs.candidateId)
}

// uint32 lastLogIndex = 3;
inline void RequestVoteArgs::clear_lastlogindex() {
  lastlogindex_ = 0u;
}
inline uint32_t RequestVoteArgs::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline uint32_t RequestVoteArgs::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteArgs.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteArgs::_internal_set_lastlogindex(uint32_t value) {
  
  lastlogindex_ = value;
}
inline void RequestVoteArgs::set_lastlogindex(uint32_t value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteArgs.lastLogIndex)
}

// uint32 lastLogTerm = 4;
inline void RequestVoteArgs::clear_lastlogterm() {
  lastlogterm_ = 0u;
}
inline uint32_t RequestVoteArgs::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline uint32_t RequestVoteArgs::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteArgs.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteArgs::_internal_set_lastlogterm(uint32_t value) {
  
  lastlogterm_ = value;
}
inline void RequestVoteArgs::set_lastlogterm(uint32_t value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteArgs.lastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteReply

// uint32 term = 1;
inline void RequestVoteReply::clear_term() {
  term_ = 0u;
}
inline uint32_t RequestVoteReply::_internal_term() const {
  return term_;
}
inline uint32_t RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteReply.term)
  return _internal_term();
}
inline void RequestVoteReply::_internal_set_term(uint32_t value) {
  
  term_ = value;
}
inline void RequestVoteReply::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteReply.term)
}

// bool voteGranted = 2;
inline void RequestVoteReply::clear_votegranted() {
  votegranted_ = false;
}
inline bool RequestVoteReply::_internal_votegranted() const {
  return votegranted_;
}
inline bool RequestVoteReply::votegranted() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteReply.voteGranted)
  return _internal_votegranted();
}
inline void RequestVoteReply::_internal_set_votegranted(bool value) {
  
  votegranted_ = value;
}
inline void RequestVoteReply::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteReply.voteGranted)
}

// -------------------------------------------------------------------

// LogEntry

// uint32 term = 1;
inline void LogEntry::clear_term() {
  term_ = 0u;
}
inline uint32_t LogEntry::_internal_term() const {
  return term_;
}
inline uint32_t LogEntry::term() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.term)
  return _internal_term();
}
inline void LogEntry::_internal_set_term(uint32_t value) {
  
  term_ = value;
}
inline void LogEntry::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.LogEntry.term)
}

// uint32 index = 2;
inline void LogEntry::clear_index() {
  index_ = 0u;
}
inline uint32_t LogEntry::_internal_index() const {
  return index_;
}
inline uint32_t LogEntry::index() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.index)
  return _internal_index();
}
inline void LogEntry::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void LogEntry::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft.LogEntry.index)
}

// bytes command = 3;
inline void LogEntry::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:raft.LogEntry.command)
}
inline std::string* LogEntry::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:raft.LogEntry.command)
  return _s;
}
inline const std::string& LogEntry::_internal_command() const {
  return command_.Get();
}
inline void LogEntry::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:raft.LogEntry.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:raft.LogEntry.command)
}

// -------------------------------------------------------------------

// RequestAppendArgs

// uint32 term = 1;
inline void RequestAppendArgs::clear_term() {
  term_ = 0u;
}
inline uint32_t RequestAppendArgs::_internal_term() const {
  return term_;
}
inline uint32_t RequestAppendArgs::term() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendArgs.term)
  return _internal_term();
}
inline void RequestAppendArgs::_internal_set_term(uint32_t value) {
  
  term_ = value;
}
inline void RequestAppendArgs::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendArgs.term)
}

// int32 leaderId = 2;
inline void RequestAppendArgs::clear_leaderid() {
  leaderid_ = 0;
}
inline int32_t RequestAppendArgs::_internal_leaderid() const {
  return leaderid_;
}
inline int32_t RequestAppendArgs::leaderid() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendArgs.leaderId)
  return _internal_leaderid();
}
inline void RequestAppendArgs::_internal_set_leaderid(int32_t value) {
  
  leaderid_ = value;
}
inline void RequestAppendArgs::set_leaderid(int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendArgs.leaderId)
}

// uint32 prevLogIndex = 3;
inline void RequestAppendArgs::clear_prevlogindex() {
  prevlogindex_ = 0u;
}
inline uint32_t RequestAppendArgs::_internal_prevlogindex() const {
  return prevlogindex_;
}
inline uint32_t RequestAppendArgs::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendArgs.prevLogIndex)
  return _internal_prevlogindex();
}
inline void RequestAppendArgs::_internal_set_prevlogindex(uint32_t value) {
  
  prevlogindex_ = value;
}
inline void RequestAppendArgs::set_prevlogindex(uint32_t value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendArgs.prevLogIndex)
}

// uint32 prevLogTerm = 4;
inline void RequestAppendArgs::clear_prevlogterm() {
  prevlogterm_ = 0u;
}
inline uint32_t RequestAppendArgs::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline uint32_t RequestAppendArgs::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendArgs.prevLogTerm)
  return _internal_prevlogterm();
}
inline void RequestAppendArgs::_internal_set_prevlogterm(uint32_t value) {
  
  prevlogterm_ = value;
}
inline void RequestAppendArgs::set_prevlogterm(uint32_t value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendArgs.prevLogTerm)
}

// uint32 leaderCommit = 5;
inline void RequestAppendArgs::clear_leadercommit() {
  leadercommit_ = 0u;
}
inline uint32_t RequestAppendArgs::_internal_leadercommit() const {
  return leadercommit_;
}
inline uint32_t RequestAppendArgs::leadercommit() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendArgs.leaderCommit)
  return _internal_leadercommit();
}
inline void RequestAppendArgs::_internal_set_leadercommit(uint32_t value) {
  
  leadercommit_ = value;
}
inline void RequestAppendArgs::set_leadercommit(uint32_t value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendArgs.leaderCommit)
}

// repeated .raft.LogEntry entries = 6;
inline int RequestAppendArgs::_internal_entries_size() const {
  return entries_.size();
}
inline int RequestAppendArgs::entries_size() const {
  return _internal_entries_size();
}
inline void RequestAppendArgs::clear_entries() {
  entries_.Clear();
}
inline ::raft::LogEntry* RequestAppendArgs::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft.RequestAppendArgs.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry >*
RequestAppendArgs::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft.RequestAppendArgs.entries)
  return &entries_;
}
inline const ::raft::LogEntry& RequestAppendArgs::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::raft::LogEntry& RequestAppendArgs::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendArgs.entries)
  return _internal_entries(index);
}
inline ::raft::LogEntry* RequestAppendArgs::_internal_add_entries() {
  return entries_.Add();
}
inline ::raft::LogEntry* RequestAppendArgs::add_entries() {
  ::raft::LogEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:raft.RequestAppendArgs.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry >&
RequestAppendArgs::entries() const {
  // @@protoc_insertion_point(field_list:raft.RequestAppendArgs.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RequestAppendReply

// uint32 term = 1;
inline void RequestAppendReply::clear_term() {
  term_ = 0u;
}
inline uint32_t RequestAppendReply::_internal_term() const {
  return term_;
}
inline uint32_t RequestAppendReply::term() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendReply.term)
  return _internal_term();
}
inline void RequestAppendReply::_internal_set_term(uint32_t value) {
  
  term_ = value;
}
inline void RequestAppendReply::set_term(uint32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendReply.term)
}

// bool success = 2;
inline void RequestAppendReply::clear_success() {
  success_ = false;
}
inline bool RequestAppendReply::_internal_success() const {
  return success_;
}
inline bool RequestAppendReply::success() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendReply.success)
  return _internal_success();
}
inline void RequestAppendReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RequestAppendReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendReply.success)
}

// uint32 conflictIndex = 3;
inline void RequestAppendReply::clear_conflictindex() {
  conflictindex_ = 0u;
}
inline uint32_t RequestAppendReply::_internal_conflictindex() const {
  return conflictindex_;
}
inline uint32_t RequestAppendReply::conflictindex() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendReply.conflictIndex)
  return _internal_conflictindex();
}
inline void RequestAppendReply::_internal_set_conflictindex(uint32_t value) {
  
  conflictindex_ = value;
}
inline void RequestAppendReply::set_conflictindex(uint32_t value) {
  _internal_set_conflictindex(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendReply.conflictIndex)
}

// uint32 conflictTerm = 4;
inline void RequestAppendReply::clear_conflictterm() {
  conflictterm_ = 0u;
}
inline uint32_t RequestAppendReply::_internal_conflictterm() const {
  return conflictterm_;
}
inline uint32_t RequestAppendReply::conflictterm() const {
  // @@protoc_insertion_point(field_get:raft.RequestAppendReply.conflictTerm)
  return _internal_conflictterm();
}
inline void RequestAppendReply::_internal_set_conflictterm(uint32_t value) {
  
  conflictterm_ = value;
}
inline void RequestAppendReply::set_conflictterm(uint32_t value) {
  _internal_set_conflictterm(value);
  // @@protoc_insertion_point(field_set:raft.RequestAppendReply.conflictTerm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raftRPC_2eproto
